let selectedStatus = "todo"; // Default-Wert f√ºr den Add-Task-Button

/**
 * Creates and displays a task creation form in the board.
 *
 * This function sets the inner HTML of the 'addTaskFromBoard' element
 * to a task creation form generated by the `createTaskFromBoardDiv` function.
 */
function createTaskFromBoard(status = "todo") {
    const createTask = document.getElementById("addTaskFromBoard");
    createTask.innerHTML = createTaskFromBoardDiv();
    createTask.classList.add("board-mode");
    selectedContacts = [];
    selectedColors = [];
    subtasks = [];
    selectedStatus = status || "todo"; // Zuweisung der Spalte
    checkAddTaskChangesInBoard();
    let subtaskInputBoard = document.getElementById("board-new-subtask-input");
    subtaskInputBoard.addEventListener("input", showCloseOrDeleteIconDuringWritingSubtaskBoard);
    subtaskInputBoard.addEventListener("keydown", addSubtaskByEnterKeyBoard);
}

/**
 * Adds a new task from the board by validating inputs, collecting task data, and sending it to the server.
 *
 * This function:
 * - Validates all input fields using `validateAllInputsBoard`.
 * - Collects the task data, including selected contacts, priority, category, color, subtasks, title, description, date, and status.
 * - Sends the task data to the server using the `addTask` function.
 * - Clears the input fields on the board using `clearFieldsBoard`.
 *
 * @returns {void}
 */
function addTaskFromBoard() {
    if (!validateAllInputsBoard()) {
        return;
    }

    let task = {
        name: selectedContacts,
        priority: selectedPrio,
        category: selectedCategory,
        color: selectedColors,
        addedSubtasks: subtasks,
        title: document.getElementById("board-title-input").value,
        taskDescription: document.getElementById("board-textarea-input").value,
        date: document.getElementById("board-date-input").value,
        status: selectedStatus,
    };
    addTask("/tasks.json", task);
    clearFieldsBoard();
}

/**
 * Clears the input fields and resets all related elements on the task board.
 *
 * This function:
 * - Clears input fields on the board using `clearInputFieldsBoard`.
 * - Resets the arrays used for storing task data via `setBackArrays`.
 * - Resets placeholder text for the category and assigned contacts dropdowns.
 * - Clears the container for selected contacts' circle icons.
 * - Resets the task priority button to its default state.
 * - Closes the contacts dropdown and resets the subtask list.
 * - Resets any required notification messages and subtask-related icons.
 *
 * @returns {void}
 */
function clearFieldsBoard() {
    clearInputFieldsBoard();
    setBackArrays();

    document.getElementById("board-category-placeholder").innerHTML = "Select task category";
    document.getElementById("board-assigned-placeholder").innerHTML = "Select contacts to assign";
    document.getElementById("board-selected-contacts-circle-container").innerHTML = "";

    resetPrioBoard();
    document.getElementById("board-prio-medium-button").classList.add("prio-medium-button-bg-color");
    document.getElementById("board-prio-medium-button").classList.remove("prio-default-text-color");
    closeContactsDropDownBoard();
    resetSubtaskListBoard();
    resetRequiredNotificationsBoard();
    resetSubtaskIconBoard();
    resetSubtaskRequiredNotificationBoard();
}

/**
 * Resets the required notification messages on the task board.
 *
 * This function:
 * - Resets the date, title, and category required notifications by calling their respective reset functions.
 *
 * @returns {void}
 */
function resetRequiredNotificationsBoard() {
    resetDateRequiredNotificationBoard();
    resetTitleRequiredNotificationBoard();
    resetCategoryRequiredNotificationBoard();
}

/**
 * Resets the required notification for the date input field on the task board.
 *
 * This function:
 * - Hides the missing date message by setting its display style to "none".
 * - Resets the border style of the date input field to its default state.
 *
 * @returns {void}
 */
function resetDateRequiredNotificationBoard() {
    let missingDateMessage = document.getElementById("board-missing-date-message");
    missingDateMessage.style.display = "none";
    document.getElementById("board-date-input").style.border = "";
}

/**
 * Resets the required notification for the title input field on the task board.
 *
 * This function:
 * - Resets the border style of the title input field to its default state.
 * - Hides the missing title message by setting its display style to "none".
 *
 * @returns {void}
 */
function resetTitleRequiredNotificationBoard() {
    let missingTitleMessage = document.getElementById("board-missing-title-message");
    let titleInput = document.getElementById("board-title-input");
    titleInput.style.border = "";
    missingTitleMessage.style.display = "none";
}

/**
 * Resets the required notification for the category input field on the task board.
 *
 * This function:
 * - Resets the border style of the category input field to its default state.
 * - Hides the missing category message by setting its display style to "none".
 *
 * @returns {void}
 */
function resetCategoryRequiredNotificationBoard() {
    let missingCategoryMessage = document.getElementById("board-missing-category-message");
    let categoryInput = document.getElementById("board-selected-category");
    categoryInput.style.border = "";

    missingCategoryMessage.style.display = "none";
}

/**
 * Resets the required notification for the subtask input field on the task board.
 *
 * This function:
 * - Hides the missing subtask message by setting its display style to "none".
 * - Resets the border style of the subtask input container to its default state.
 *
 * @returns {void}
 */
function resetSubtaskRequiredNotificationBoard() {
    let missingSubtaskMessage = document.getElementById("board-missing-subtask-message");
    missingSubtaskMessage.style.display = "none";
    document.getElementById("board-new-subtask-container").style.border = "";
}

/**
 * Clears the input fields on the task board.
 *
 * This function resets the following fields to their empty state:
 * - The title input field (`board-title-input`).
 * - The description textarea input field (`board-textarea-input`).
 * - The date input field (`board-date-input`).
 * - The new subtask input field (`board-new-subtask-input`).
 *
 * @returns {void}
 */
function clearInputFieldsBoard() {
    document.getElementById("board-title-input").value = "";
    document.getElementById("board-textarea-input").value = "";
    document.getElementById("board-date-input").value = "";
    document.getElementById("board-new-subtask-input").value = "";
}

/**
 * Validates all input fields on the task board.
 *
 * This function checks if the following fields are valid:
 * - The title input field.
 * - The date input field.
 * - The category input field.
 *
 * If any of the fields are invalid, the function sets the `isValid` flag to `false`.
 *
 * @returns {boolean} Returns `true` if all input fields are valid, otherwise `false`.
 */
function validateAllInputsBoard() {
    let isValid = true;

    if (!checkIfTitleIsEnteredBoard()) {
        isValid = false;
    }

    if (!checkIfDateIsSelectedBoard()) {
        isValid = false;
    }

    if (!checkIfCategoryIsSelectedBoard()) {
        isValid = false;
    }

    return isValid;
}

/**
 * Checks if the title input field on the task board has been entered.
 *
 * This function verifies whether the title input field contains a value. If the value is present:
 * - Hides the "missing title" message.
 * - Keeps the input border in its default state.
 *
 * If the title input is empty:
 * - Displays the "missing title" message.
 * - Changes the input border to indicate an error.
 *
 * @returns {boolean} Returns `true` if the title input has a value, otherwise `false`.
 */
function checkIfTitleIsEnteredBoard() {
    let missingTitleMessage = document.getElementById("board-missing-title-message");
    let titleInput = document.getElementById("board-title-input");

    let isValid = true;

    if (titleInput.value) {
        missingTitleMessage.style.display = "none";
        isValid = true;
    } else {
        titleInput.style.border = "1px solid #ff8190";
        missingTitleMessage.style.display = "flex";
        isValid = false;
    }
    return isValid;
}

/**
 * Checks if a date has been selected in the task board's date input field.
 *
 * This function verifies whether the date input field contains a value. If the value is present:
 * - Hides the "missing date" message.
 * - Keeps the input border in its default state.
 *
 * If the date input is empty:
 * - Displays the "missing date" message.
 * - Changes the input border to indicate an error.
 *
 * @returns {boolean} Returns `true` if a date is selected, otherwise `false`.
 */
function checkIfDateIsSelectedBoard() {
    let missingDateMessage = document.getElementById("board-missing-date-message");
    let dateInput = document.getElementById("board-date-input");

    let isValid = true;

    if (dateInput.value) {
        missingDateMessage.style.display = "none";
        isValid = true;
    } else {
        missingDateMessage.style.display = "flex";
        dateInput.style.border = "1px solid #ff8190";
        isValid = false;
    }
    return isValid;
}

/**
 * Checks if a category has been selected in the task board's category input field.
 *
 * This function verifies whether a category is selected. If a category is selected:
 * - Hides the "missing category" message.
 * - Sets the category input border to indicate valid selection.
 *
 * If no category is selected:
 * - Displays the "missing category" message.
 * - Changes the category input border to indicate an error.
 *
 * @returns {boolean} Returns `true` if a category is selected, otherwise `false`.
 */
function checkIfCategoryIsSelectedBoard() {
    let missingCategoryMessage = document.getElementById("board-missing-category-message");
    let categoryInput = document.getElementById("board-selected-category");

    let isValid = true;

    if (selectedCategory) {
        missingCategoryMessage.style.display = "none";
        categoryInput.style.border = "1px solid #90d1ed";

        isValid = true;
    } else {
        missingCategoryMessage.style.display = "flex";
        categoryInput.style.border = "1px solid #ff8190";
        isValid = false;
    }
    return isValid;
}

/**
 * Resets the subtask list displayed on the task board.
 *
 * This function clears the content of the container that holds the generated subtasks.
 * It effectively removes any existing subtasks from the view by setting the container's innerHTML to an empty string.
 */
function resetSubtaskListBoard() {
    document.getElementById("board-generated-subtask-list-container").innerHTML = "";
}

/**
 * Checks for changes in the task inputs on the task board.
 *
 * This function validates the following task fields:
 * - Task title
 * - Task description
 * - Task date
 * - Task subtasks
 *
 * It calls respective check functions for each of these fields to ensure they meet the necessary criteria.
 */
function checkAddTaskChangesInBoard() {
    checkTaskTitleBoard();
    checkTaskDescriptionBoard();
    checkTaskDateBoard();
    checkTaskSubtaskBoard();
}

/**
 * Validates the task title input on the task board.
 *
 * This function sets up event listeners to validate the task title in the input field with ID `board-title-input`.
 * It checks the following:
 * - When the input is clicked inside, it applies a border color and shows a missing title message if needed.
 * - When the input is clicked outside, it updates the border color and hides the missing title message if the input is valid.
 * - When a keystroke occurs inside the input, it ensures the input is valid and updates the UI accordingly.
 *
 * The function uses `setTimeout` to allow the DOM to load before adding the event listeners.
 */
function checkTaskTitleBoard() {
    setTimeout(() => {
        const input = document.getElementById("board-title-input");
        const message = document.getElementById("board-missing-title-message");
        checkTaskOnClickInsideElementBoard(input, message, "#ff8190", "#90d1ed");
        checkTaskOnClickOutsideElementBoard(input, message, "#ff8190", "#d1d1d1");
        checkTaskOnKeystrokeInsideElementBoard(input, message, "#ff8190", "#90d1ed");
    }, 100);
}

/**
 * Validates the task description input on the task board.
 *
 * This function sets up event listeners to validate the task description in the input field with ID `board-textarea-input`.
 * It checks the following:
 * - When the input is clicked inside, it applies a border color.
 * - When the input is clicked outside, it resets the border color to its default state.
 * - When a keystroke occurs inside the input, it updates the UI to reflect the validity of the input, ensuring the border color changes accordingly.
 *
 * The function uses `setTimeout` to allow the DOM to load before adding the event listeners.
 */
function checkTaskDescriptionBoard() {
    setTimeout(() => {
        const input = document.getElementById("board-textarea-input");
        checkTaskOnClickInsideElementBoard(input, "", "#90d1ed", "#90d1ed");
        checkTaskOnClickOutsideElementBoard(input, "", "#d1d1d1", "#d1d1d1");
        checkTaskOnKeystrokeInsideElementBoardDescription(input, "#90d1ed");
    }, 100);
}

/**
 * Validates the task date input on the task board.
 *
 * This function sets up event listeners to validate the task date in the input field with ID `board-date-input`.
 * It checks the following:
 * - When the input is clicked inside, it applies a border color and displays an error message if the input is empty.
 * - When the input is clicked outside, it resets the border color and hides the error message if the input is valid.
 * - When a keystroke occurs inside the input, it updates the UI to reflect the validity of the input.
 *
 * The function uses `setTimeout` to allow the DOM to load before adding the event listeners.
 */
function checkTaskDateBoard() {
    setTimeout(() => {
        const input = document.getElementById("board-date-input");
        const message = document.getElementById("board-missing-date-message");
        checkTaskOnClickInsideElementBoard(input, message, "#ff8190", "#90d1ed");
        checkTaskOnClickOutsideElementBoard(input, message, "#ff8190", "#d1d1d1");
        checkTaskOnKeystrokeInsideElementBoard(input, message, "#ff8190", "#90d1ed");
    }, 100);
}

/**
 * Handles the click event inside the specified input element on the task board.
 *
 * This function adds an event listener to the input element that triggers when the user clicks inside the input field.
 * It checks whether the input field is empty and applies the appropriate border color and error message visibility.
 *
 * If the input is empty:
 * - The border color is set to `bordercolor1`.
 * - The error message (if provided) is displayed.
 *
 * If the input is not empty:
 * - The border color is set to `bordercolor2`.
 * - The error message (if provided) is hidden.
 *
 * @param {HTMLElement} input - The input element to validate.
 * @param {HTMLElement} message - The error message element to display when validation fails.
 * @param {string} bordercolor1 - The border color when the input is empty.
 * @param {string} bordercolor2 - The border color when the input is not empty.
 */
function checkTaskOnClickInsideElementBoard(input, message, bordercolor1, bordercolor2) {
    input.addEventListener("click", () => {
        if (input.value.trim === "") {
            input.style = `border: 1px solid ${bordercolor1};`;
            if (message != "") {
                message.style.display = "flex";
            }
        } else {
            input.style = `border: 1px solid ${bordercolor2};`;
            if (message != "") {
                message.style.display = "none";
            }
        }
    });
}

/**
 * Handles the blur event when the input element loses focus on the task board.
 *
 * This function adds an event listener to the input element that triggers when the user clicks outside the input field (blur event).
 * It checks whether the input field is empty and applies the appropriate border color and error message visibility.
 *
 * If the input is empty:
 * - The border color is set to `bordercolor1`.
 * - The error message (if provided) is displayed.
 *
 * If the input is not empty:
 * - The border color is set to `bordercolor2`.
 * - The error message (if provided) is hidden.
 *
 * @param {HTMLElement} input - The input element to validate.
 * @param {HTMLElement} message - The error message element to display when validation fails.
 * @param {string} bordercolor1 - The border color when the input is empty.
 * @param {string} bordercolor2 - The border color when the input is not empty.
 */
function checkTaskOnClickOutsideElementBoard(input, message, bordercolor1, bordercolor2) {
    input.addEventListener("blur", () => {
        if (input.value === "") {
            input.style = `border: 1px solid ${bordercolor1};`;
            if (message != "") {
                message.style.display = "flex";
            }
        } else {
            input.style = `border: 1px solid ${bordercolor2};`;
            if (message != "") {
                message.style.display = "none";
            }
        }
    });
}

/**
 * Handles the input event to validate the input element on keystroke in the task board.
 *
 * This function adds an event listener to the input element that triggers when the user types into the input field (input event).
 * It checks whether the input field is empty and applies the appropriate border color and error message visibility.
 *
 * If the input is empty:
 * - The border color is set to `bordercolor1`.
 * - The error message (if provided) is displayed.
 *
 * If the input is not empty:
 * - The border color is set to `bordercolor2`.
 * - The error message (if provided) is hidden.
 *
 * @param {HTMLElement} input - The input element to validate.
 * @param {HTMLElement} message - The error message element to display when validation fails.
 * @param {string} bordercolor1 - The border color when the input is empty.
 * @param {string} bordercolor2 - The border color when the input is not empty.
 */
function checkTaskOnKeystrokeInsideElementBoard(input, message, bordercolor1, bordercolor2) {
    input.addEventListener("input", () => {
        if (input.value === "") {
            input.style = `border: 1px solid ${bordercolor1};`;
            if (message != "") {
                message.style.display = "flex";
            }
        } else {
            input.style = `border: 1px solid ${bordercolor2};`;
            if (message != "") {
                message.style.display = "none";
            }
        }
    });
}

/**
 * Handles the input event to validate the input element on keystroke in the task description field on the board.
 *
 * This function adds an event listener to the input element that triggers when the user types into the input field (input event).
 * It applies the specified border color to the input element as the user types.
 *
 * @param {HTMLElement} input - The input element (task description field) to validate.
 * @param {string} bordercolor - The border color to apply while the user is typing.
 */
function checkTaskOnKeystrokeInsideElementBoardDescription(input, bordercolor) {
    input.addEventListener("input", () => {
        input.style = `border: 1px solid ${bordercolor1};`;
    });
}

/**
 * Initializes event listeners for the subtask input fields on the board, including click and input actions.
 *
 * This function waits for the DOM to load and ensures that the subtask container and input elements are available.
 * It then calls helper functions to manage the subtask input's behavior when focused or clicked outside.
 *
 * @returns {void}
 */
function checkTaskSubtaskBoard() {
    setTimeout(() => {
        const input1 = document.getElementById("board-new-subtask-container");
        const input2 = document.getElementById("board-new-subtask-input");

        if (input1 && input2) {
            checkTaskOnClickInsideSubtaskElementBoard(input1, input2, "#90d1ed");
            checkTaskOnClickOutsideSubtaskElementBoard(input1, input2, "#d1d1d1");
        }
    }, 100);
}

/**
 * Adds event listeners for when the subtask input is focused or updated inside the task board.
 *
 * This function is responsible for changing the border color of the subtask container when the input field gains focus
 * or when the user starts typing. Additionally, it hides the "missing subtask" message once the user enters text in the input field.
 *
 * @param {HTMLElement} input1 - The element representing the container of the subtask input field.
 * @param {HTMLElement} input2 - The subtask input field element.
 * @param {string} bordercolor - The border color to apply when the input is focused or updated.
 *
 * @returns {void}
 */
function checkTaskOnClickInsideSubtaskElementBoard(input1, input2, bordercolor) {
    input2.addEventListener("focus", () => {
        input1.style.border = `1px solid ${bordercolor}`;
    });

    input2.addEventListener("input", () => {
        if (input2.value.trim() !== "") {
            input1.style.border = `1px solid ${bordercolor}`;
            const missingSubtaskMessage = document.getElementById("board-missing-subtask-message");
            if (missingSubtaskMessage) {
                missingSubtaskMessage.style.display = "none";
            }
        }
    });
}

/**
 * Adds an event listener to detect when a click occurs outside the subtask container or input field.
 *
 * This function is responsible for resetting the border color of the subtask container to the given color when a click
 * happens outside the subtask input elements. It also resets the subtask icon and hides the "missing subtask" message
 * if the click was outside the input container.
 *
 * @param {HTMLElement} input1 - The element representing the container of the subtask input field.
 * @param {HTMLElement} input2 - The subtask input field element.
 * @param {string} bordercolor - The border color to apply when the click happens outside the input elements.
 *
 * @returns {void}
 */
function checkTaskOnClickOutsideSubtaskElementBoard(input1, input2, bordercolor) {
    document.addEventListener("click", (event) => {
        if (!input1.contains(event.target) && !input2.contains(event.target)) {
            input1.style.border = `1px solid ${bordercolor}`;
            resetSubtaskIconBoard();
            const missingSubtaskMessage = document.getElementById("board-missing-subtask-message");
            if (missingSubtaskMessage) {
                missingSubtaskMessage.style.display = "none";
            }
        }
    });
}

/**
 * Selects a priority button for the task board and applies the appropriate styling.
 *
 * This function resets the priority button styles, then highlights the selected priority
 * button by adding a background color class and removing the default text color class.
 * It also updates the `selectedPrio` variable to reflect the chosen priority.
 *
 * @param {string} prio - The priority to be selected. This is expected to be a string, such as "urgent", "medium", or "low".
 *
 * @returns {void}
 */
function choosePrioBoard(prio) {
    let selectedPioButton = document.getElementById(`board-prio-${prio}-button`);

    resetPrioBoard();

    selectedPioButton.classList.add(`prio-${prio}-button-bg-color`);
    selectedPioButton.classList.remove("prio-default-text-color");

    selectedPrio = prio;
}

/**
 * Resets the priority buttons on the task board to their default state.
 *
 * This function removes any background color classes from the priority buttons (urgent, medium, low)
 * and restores the default text color by adding the `prio-default-text-color` class to all buttons.
 * It ensures that no priority button is selected, effectively resetting the priority selection.
 *
 * @returns {void}
 */
function resetPrioBoard() {
    let urgentButton = document.getElementById("board-prio-urgent-button");
    let mediumButton = document.getElementById("board-prio-medium-button");
    let lowButton = document.getElementById("board-prio-low-button");

    urgentButton.classList.remove("prio-urgent-button-bg-color");
    mediumButton.classList.remove("prio-medium-button-bg-color");
    lowButton.classList.remove("prio-low-button-bg-color");

    urgentButton.classList.add("prio-default-text-color");
    mediumButton.classList.add("prio-default-text-color");
    lowButton.classList.add("prio-default-text-color");
}

/**
 * Toggles between adding and closing a subtask in the task board.
 *
 * When a subtask is being added, this function updates the subtask icon container
 * to display the close and check icons for interacting with the subtask. It also
 * adds hover effects to the icons for better user experience.
 *
 * If a subtask is already being reset (determined by `isSubtaskResetting`),
 * the function will exit early and prevent any changes.
 *
 * @returns {void}
 */
function addOrCloseSubtaskBoard() {
    if (isSubtaskResetting) return;

    let subtaskIconContainer = document.getElementById("board-subtask-icon-container");

    subtaskIconContainer.classList.remove("plusIconHover");

    subtaskIconContainer.innerHTML = /*html*/ `
        <div id="board-close-icon-container" onclick="closeSubtaskDraftBoard()"><img src="/img/addTask/close.png" alt="delete" id="close-subtask"></div>
        <div class="border-subtask-container"></div>
        <div id="board-check-icon-container" onclick="addSubtaskFromBoard()"><img src="/img/addTask/check.png" alt="check" id="check-subtask"></div>`;

    let checkIconContainer = document.getElementById("board-check-icon-container");
    checkIconContainer.classList.add("circleHoverEffect");
    let closeIconContainer = document.getElementById("board-close-icon-container");
    closeIconContainer.classList.add("circleHoverEffect");
}

function addSubtaskFromBoard() {
    let newSubtaskInput = document.getElementById("board-new-subtask-input");
    let subtaskList = document.getElementById("board-generated-subtask-list-container");
    let missingSubtaskMessage = document.getElementById("board-missing-subtask-message");
    let subtaskContainer = document.getElementById("board-new-subtask-container");
    let i = subtasks.length;

    handleSubtaskValidationBoard(newSubtaskInput, subtaskList, subtaskContainer, missingSubtaskMessage, i);
    resetSubtaskIconBoard();
}

/**
 * Closes the subtask draft and resets the input field.
 */
function closeSubtaskDraftBoard() {
    let subtaskDraft = document.getElementById("board-new-subtask-input");
    subtaskDraft.value = ``;
    resetSubtaskIconBoard();
}

/**
 * Validates and handles the submission of a new subtask in the task board.
 *
 * This function checks if the subtask input field is not empty. If the input is valid (not empty),
 * it adds the new subtask to the list, updates the UI to display the subtask, and resets the input field.
 * It also styles the subtask container with a border and hides any error messages.
 *
 * If the input is empty, the function displays an error message and applies an error border to the container.
 *
 * @param {HTMLInputElement} newSubtaskInput - The input field where the user types the subtask.
 * @param {HTMLElement} subtaskList - The container where the list of subtasks is displayed.
 * @param {HTMLElement} subtaskContainer - The container element for the subtask input field.
 * @param {HTMLElement} missingSubtaskMessage - The message element displayed when no subtask is entered.
 * @param {number} i - The index of the subtask being added.
 * @returns {void}
 */
function handleSubtaskValidationBoard(newSubtaskInput, subtaskList, subtaskContainer, missingSubtaskMessage, i) {
    let trimmedInput = newSubtaskInput.value.trim();

    if (trimmedInput !== "") {
        subtasks.push({ subtask: trimmedInput, status: "unchecked" });

        let subtaskHTML = templateSubtasksListHTMLBoard(i, subtasks[i].subtask);
        subtaskList.innerHTML += subtaskHTML;

        newSubtaskInput.value = "";
        subtaskContainer.style.border = "1px solid #90d1ed";
        missingSubtaskMessage.style.display = "none";
    } else {
        subtaskContainer.style.border = "1px solid #ff8190";
        missingSubtaskMessage.style.display = "flex";
    }
}

/**
 * Resets the subtask icon container on the task board.
 *
 * This function resets the subtask icon container to display the plus icon. It replaces the current content
 * of the container with a new plus icon and adds the necessary hover effect and click event listener.
 * It also sets a flag to indicate that the subtask reset operation is in progress and calls the `resetSubtaskClearButton`
 * function after a brief delay to reset any related UI elements.
 *
 * @returns {void}
 */
function resetSubtaskIconBoard() {
    let subtaskIconContainer = document.getElementById("board-subtask-icon-container");

    subtaskIconContainer.innerHTML = /*html*/ `
        <div id="board-plus-icon-container" class="circleHoverEffect" onclick="addOrCloseSubtaskBoard()">
            <img src="/img/addTask/add.png" id="plus-icon" alt="plus-icon" />
        </div>`;

    isSubtaskResetting = true;
    setTimeout(resetSubtaskClearButton, 1);
}

/**
 * Shows the close or delete icon during subtask creation based on input value.
 *
 * This function checks if there is any text entered in the subtask input field. If text is present, it calls
 * the `addOrCloseSubtaskBoard` function to display the close and check icons for interacting with the subtask.
 * If the input field is empty, it resets the subtask icon container by calling the `resetSubtaskIconBoard` function,
 * which restores the default plus icon.
 *
 * @returns {void}
 */
function showCloseOrDeleteIconDuringWritingSubtaskBoard() {
    let subtaskInputBoard = document.getElementById("board-new-subtask-input");

    if (subtaskInputBoard.value) {
        addOrCloseSubtaskBoard();
    } else {
        resetSubtaskIconBoard();
    }
}

/**
 * Generates HTML markup for a subtask list item in the board.
 *
 * This function generates the HTML structure for a single subtask in the list, including the subtask text,
 * an edit icon, and a delete icon. The function also assigns unique IDs to each element to manage the subtasks
 * efficiently by index.
 *
 * @param {number} i - The index of the subtask in the list.
 * @param {string} subtask - The text content of the subtask to be displayed.
 *
 * @returns {string} - The HTML string representing the subtask list item.
 */
function templateSubtasksListHTMLBoard(i, subtask) {
    return /*html*/ `
            <div class="generatedSubtasks" id="board-generated-subtask-container-${i}">
                <li id="generated-subtask-list-item-${i}" class="subtaskListItemStyle">${subtask}</li>
                <div id="generated-subtask-list-icons">
                    <div id="board-icon-container" onclick="editSubtaskBoard(${i})"><img src="/img/addTask/edit.png" alt="edit" /></div>
                    <div class="border-subtask-container"></div>
                    <div id="board-delete-icon-container" onclick="deleteSubtaskBoard(${i})">
                        <img src="/img/addTask/delete.png" alt="delete" id="delete-subtask-icon" />
                    </div>
                </div>
            </div>`;
}

/**
 * Edits a subtask in the board by replacing the subtask's text with an editable input field.
 *
 * This function is triggered when a user wants to edit a specific subtask. It updates the subtask container's
 * HTML to allow editing, replaces the current subtask text with an input field pre-filled with the current subtask
 * text, and sets up functionality to save the changes when the user presses the Enter key.
 *
 * @param {number} index - The index of the subtask to be edited in the `subtasks` array.
 */
function editSubtaskBoard(index) {
    let toEditSubtask = document.getElementById(`board-generated-subtask-container-${index}`);
    let currentSubtaskText = subtasks[index].subtask;

    toEditSubtask.classList.add("noHoverEffect");

    toEditSubtask.innerHTML = templateEditSubtasksHTMLBoard(currentSubtaskText, index);

    setupEditSubtaskByEnterKeyBoard(index);
}

/**
 * Generates the HTML structure for editing a subtask in the task board.
 *
 * This function returns the HTML structure required to replace the current subtask's display with an editable
 * input field. It also includes icons for deleting or confirming the edited subtask.
 *
 * @param {string} currentSubtaskText - The current text of the subtask to be edited.
 * @param {number} index - The index of the subtask in the `subtasks` array.
 *
 * @returns {string} The HTML string that represents the editable subtask view.
 */
function templateEditSubtasksHTMLBoard(currentSubtaskText, index) {
    return /*html*/ `
        <div id="edit-subtask-container">
            <input type="text" id="board-edit-subtask-input-${index}" value="${currentSubtaskText}" class="edit-subtask-container-styling">            
            <div id="generated-subtask-list-icons" class="showSubtaskIconsWhileEditing">
                <div id="board-delete-icon-container" onclick="deleteSubtaskBoard(${index})">
                    <img src="/img/addTask/delete.png" alt="delete" id="delete-subtask-icon" />
                </div>     
                <div class="border-subtask-container"></div>
                <div id="board-edit-icon-container" onclick="submitSubtaskBoard(${index})">
                    <img src="/img/addTask/check.png" alt="check" id="check-subtask">
                </div>
            </div>
        </div>`;
}

/**
 * Deletes a subtask from the board and updates the subtasks list.
 *
 * This function removes the HTML element representing the subtask at the given index and updates the
 * `subtasks` array by removing the corresponding subtask. It then triggers the update function to
 * reflect the changes in the task board.
 *
 * @param {number} index - The index of the subtask to be deleted from the `subtasks` array.
 */
function deleteSubtaskBoard(index) {
    let newSubtask = document.getElementById(`board-generated-subtask-container-${index}`);
    if (newSubtask) {
        newSubtask.remove();
    }
    subtasks.splice(index, 1);
    updateSubtaskListAfterDeleteBoard();
}

/**
 * Submits the edited subtask and updates the subtask list.
 *
 * This function captures the new subtask text from the input field, validates that it is not empty,
 * and updates the corresponding subtask in the `subtasks` array. After updating, it triggers a function
 * to refresh the displayed list of subtasks.
 *
 * @param {number} index - The index of the subtask to be edited in the `subtasks` array.
 */
function submitSubtaskBoard(index) {
    let editedSubtaskInput = document.getElementById(`board-edit-subtask-input-${index}`).value;

    if (editedSubtaskInput === "") {
        return;
    } else {
        subtasks[index].subtask = editedSubtaskInput;
        updateSubtaskListAfterDeleteBoard();
    }
}

/**
 * Adds a new subtask when the Enter key is pressed.
 *
 * This function listens for the "Enter" key event. When pressed, it prevents the default behavior
 * (which might be form submission or other actions) and calls the `addSubtaskFromBoard` function
 * to add the new subtask.
 *
 * @param {KeyboardEvent} event - The event object associated with the key press.
 */
function addSubtaskByEnterKeyBoard(event) {
    if (event.key === "Enter") {
        event.preventDefault();
        addSubtaskFromBoard();
    }
}

/**
 * Sets up an event listener for the Enter key press to save the edited subtask.
 *
 * This function adds a "keydown" event listener to the input field where a subtask is being edited.
 * When the Enter key is pressed, it prevents the default behavior (e.g., form submission) and calls
 * the `addEditedSubtaskByEnterKeyBoard` function to handle saving the edited subtask.
 *
 * @param {number} index - The index of the subtask being edited in the `subtasks` array.
 */
function setupEditSubtaskByEnterKeyBoard(index) {
    let editSubtaskInput = document.getElementById(`board-edit-subtask-input-${index}`);
    editSubtaskInput.addEventListener("keydown", function (event) {
        if (event.key === "Enter") {
            event.preventDefault();
            addEditedSubtaskByEnterKeyBoard(index, event);
        }
    });
}

/**
 * Handles the submission of an edited subtask when the Enter key is pressed.
 *
 * This function is triggered when the Enter key is pressed while editing a subtask.
 * It prevents the default behavior and calls the `submitSubtaskBoard` function
 * to save the changes to the subtask.
 *
 * @param {number} index - The index of the subtask being edited in the `subtasks` array.
 * @param {KeyboardEvent} event - The keyboard event triggered by pressing the Enter key.
 */
function addEditedSubtaskByEnterKeyBoard(index, event) {
    if (event.key === "Enter") {
        event.preventDefault();
        submitSubtaskBoard(index);
    }
}

/**
 * Updates the displayed list of subtasks after a subtask is deleted.
 *
 * This function clears the current list of subtasks from the DOM and then
 * re-renders all remaining subtasks in the `subtasks` array. It uses the
 * `templateSubtasksListHTMLBoard` function to generate the HTML for each subtask
 * and appends it to the `board-generated-subtask-list-container`.
 */
function updateSubtaskListAfterDeleteBoard() {
    let subtaskList = document.getElementById("board-generated-subtask-list-container");

    subtaskList.innerHTML = "";

    for (let i = 0; i < subtasks.length; i++) {
        let subtaskHTML = templateSubtasksListHTMLBoard(i, subtasks[i].subtask);
        subtaskList.innerHTML += subtaskHTML;
    }
}

/**
 * Displays the contacts dropdown list for the board and updates the UI elements
 * based on the currently selected contacts.
 *
 * This function performs the following actions:
 * - Fetches the list of contacts using `fetchContacts()`.
 * - Updates the placeholder text in the assigned contacts container based on the number of selected contacts.
 * - Changes the color of the assigned contacts container using `setColorOfAssignedContainerBoard()`.
 * - Updates the dropdown arrow icon.
 * - Populates the contacts dropdown list with HTML generated by `templateContactsHTMLDropdownListBoard()`.
 * - Reveals the contacts dropdown list by removing the `d-none` class.
 * - Hides the selected contacts circle container.
 * - Ensures that the correct checked contacts are displayed when the dropdown is closed by calling `showCheckedContactsAfterDropdownClosingBoard()`.
 *
 * @async
 */
async function showContactsDropDownBoard() {
    await fetchContacts();

    let assignedPlaceholder = document.getElementById("board-assigned-placeholder");
    if (selectedContacts.length >= 0) {
        assignedPlaceholder.innerHTML = "An";
    }
    setColorOfAssignedContainerBoard();
    document.getElementById("board-contacts-dropwdown-arrow-container").innerHTML = /*html*/ `<img src="/img/addTask/arrow_drop_up.png" id="dropdown-arrow"/>`;

    let dropdownList = document.getElementById("board-dropdown-list");
    dropdownList.innerHTML = templateContactsHTMLDropdownListBoard();

    dropdownList.classList.remove("d-none");
    document.getElementById("board-selected-contacts-circle-container").style.display = "none";

    showCheckedContactsAfterDropdownClosingBoard();
}

/**
 * Updates the state of checkboxes in the contacts dropdown list based on previously selected contacts.
 */
function showCheckedContactsAfterDropdownClosingBoard() {
    for (let i = 0; i < contactsWithColors.length; i++) {
        let contactName = contactsWithColors[i].contact;
        let checkBox = document.getElementById(`board-unchecked-box-${i}`);

        if (selectedContacts.includes(contactName)) {
            checkBox.src = "/img/checked.png";
        } else {
            checkBox.src = "/img/unchecked.png";
        }
    }
}

/**
 * Closes the contacts dropdown list and updates the UI elements, including showing selected contacts in circles.
 */
function closeContactsDropDownBoard() {
    let assignedPlaceholder = document.getElementById("board-assigned-placeholder");
    assignedPlaceholder.innerHTML = /*html*/ `<span id="board-assigned-placeholder">Select contacts to assign</span>`;

    document.getElementById("board-contacts-dropwdown-arrow-container").innerHTML = /*html*/ `<div id="board-contacts-dropwdown-arrow-container"><img src="/img/addTask/arrow_drop_down.svg" id="dropdown-arrow" /></div>`;
    document.getElementById("board-dropdown-list").classList.add("d-none");
    document.getElementById("board-selected-contacts-circle-container").style.display = "flex";

    removeColorOfBorderAssignedContainerBoard();
    showCirclesOfSelectedContactsBoard();
}

/**
 * Selects or deselects a contact based on the current checkbox state and updates the UI accordingly.
 *
 * @param {string} contactName - The name of the contact to be selected or deselected.
 * @param {number} index - The index of the contact in the contact list.
 */
function selectContactBoard(contactName, index) {
    if (selectedContacts.includes(contactName)) {
        handleContactDeselectionBoard(contactName, index);
    } else {
        handleContactSelectionBoard(contactName, index);
    }
}

/**
 * Handles the selection of a contact by updating the UI and the selectedContacts array.
 *
 * @param {string} contactName - The name of the contact to be selected.
 * @param {number} index - The index of the contact in the contact list.
 */
function handleContactSelectionBoard(contactName, index) {
    let selectedContactColor = contactsWithColors[index].color; // Hier wird die Farbe aus contactsWithColors genommen
    let assignedPlaceholder = document.getElementById("board-assigned-placeholder");

    if (!selectedContacts.includes(contactName)) {
        selectedContacts.push(contactName);
        selectedColors.push(selectedContactColor);
        assignedPlaceholder.innerHTML = /*html*/ `<span id="board-assigned-placeholder">An</span>`;
        document.getElementById("board-assigned-container").classList.add("heightAuto");
        document.getElementById(`board-unchecked-box-${index}`).src = "/img/checked.png";
    }
}

/**
 * Handles the deselection of a contact by updating the UI and the selectedContacts array.
 *
 * @param {string} contactName - The name of the contact to be deselected.
 * @param {number} index - The index of the contact in the contact list.
 */
function handleContactDeselectionBoard(contactName, index) {
    let contactColor = contactsWithColors[index].color; // Hier wird die Farbe aus contactsWithColors genommen
    let indexOfSelectedContact = selectedContacts.indexOf(contactName);
    let indexOfSelectedColor = selectedColors.indexOf(contactColor);

    document.getElementById(`board-unchecked-box-${index}`).src = "/img/unchecked.png";

    if (indexOfSelectedContact >= 0) {
        selectedContacts.splice(indexOfSelectedContact, 1);
    }
    if (indexOfSelectedColor >= 0) {
        selectedColors.splice(indexOfSelectedColor, 1);
    }

    if (selectedContacts.length === 0) {
        document.getElementById("board-assigned-container").classList.remove("heightAuto");
    }
}

/**
 * Sets a colored border for the assigned contacts container when contacts are selected.
 */
function setColorOfAssignedContainerBoard() {
    let selectContactsContainer = document.getElementById("board-selected-name");
    selectContactsContainer.style.border = "1px solid #90D1ED"; // color changed by Andrej from "#90D1ED" to "blue"
}

/**
 * Removes the colored border from the assigned contacts container.
 */
function removeColorOfBorderAssignedContainerBoard() {
    let selectContactsContainer = document.getElementById("board-selected-name");
    selectContactsContainer.style.border = "";
}

/**
 * Displays the selected contacts as colored circles with their initials.
 */
function showCirclesOfSelectedContactsBoard() {
    let circleContainer = document.getElementById("board-selected-contacts-circle-container");
    circleContainer.innerHTML = "";

    let maxCircles = 6;
    let remainingContacts = selectedContacts.length - maxCircles;

    for (let i = 0; i < selectedContacts.length; i++) {
        let contact = selectedContacts[i];
        let choosenContact = contactList.indexOf(contact);
        let [firstName, lastName] = contact.split(" ");
        let firstLetter = firstName.charAt(0).toUpperCase();
        let lastLetter = lastName.charAt(0).toUpperCase();
        let color = colors[choosenContact];

        if (i >= maxCircles) {
            break;
        }

        let contactHTML = /*html*/ `<div class="circle" style="background-color: ${color}">${firstLetter}${lastLetter}</div>`;
        circleContainer.innerHTML += contactHTML;
    }

    if (remainingContacts > 0) {
        let remainingText = /*html*/ `<div class="moreCirlce">+${remainingContacts} weitere</div>`;
        circleContainer.innerHTML += remainingText;
    }
}

/**
 * Generates the HTML structure for the contacts dropdown list.
 * Contacts are sorted by their first name, and each contact is displayed with a colored circle and a checkbox.
 *
 * @returns {string} The generated HTML for the contacts dropdown list.
 */
function templateContactsHTMLDropdownListBoard() {
    let dropdownHTML = "";

    let contactsWithColors = combineContactsAndColors(contactList, colors);
    contactsWithColors = sortContactsWithColors(contactsWithColors);

    for (let i = 0; i < contactsWithColors.length; i++) {
        let { contact, color } = contactsWithColors[i];
        let [firstName, lastName] = contact.split(" ");
        let firstLetter = firstName.charAt(0).toUpperCase();
        let lastLetter = lastName.charAt(0).toUpperCase();

        dropdownHTML += /*html*/ `
            <div class="dropdown-item" id="board-dropdown-list-contact-${i}" 
                 onclick="selectContactBoard('${contact}', ${i}, '${color}'), doNotCloseDropdown(event)">
                <div>
                    <div class="circle" style="background-color: ${color};">
                        ${firstLetter}${lastLetter}
                    </div>
                    <span class="contactsDropdownNameSpan">${contact}</span>
                </div>
                <img src="/img/unchecked.png" alt="unchecked" id="board-unchecked-box-${i}" class="uncheckedBox">
            </div>`;
    }

    return dropdownHTML;
}

function checkIfContactsDropdownIsVisibleBoard() {
    let dropdownList = document.getElementById("board-dropdown-list");

    if (dropdownList.classList.contains("d-none")) {
        showContactsDropDownBoard();
    } else {
        closeContactsDropDownBoard();
    }
}

/**
 * Displays a task creation form in the board.
 */
function createTaskFromBoardDiv() {
    return /*html*/ `
        <div id="task-form-overlay">
            <div class="floating-task-container">
                <div id="h1-container"><h1>Add Task</h1></div>
                <div class="close-add-task-form" onclick="closeAddTaskForm()">
                    <svg width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M6.9998 8.40005L2.0998 13.3C1.91647 13.4834 1.68314 13.575 1.3998 13.575C1.11647 13.575 0.883138 13.4834 0.699805 13.3C0.516471 13.1167 0.424805 12.8834 0.424805 12.6C0.424805 12.3167 0.516471 12.0834 0.699805 11.9L5.5998 7.00005L0.699805 2.10005C0.516471 1.91672 0.424805 1.68338 0.424805 1.40005C0.424805 1.11672 0.516471 0.883382 0.699805 0.700049C0.883138 0.516715 1.11647 0.425049 1.3998 0.425049C1.68314 0.425049 1.91647 0.516715 2.0998 0.700049L6.9998 5.60005L11.8998 0.700049C12.0831 0.516715 12.3165 0.425049 12.5998 0.425049C12.8831 0.425049 13.1165 0.516715 13.2998 0.700049C13.4831 0.883382 13.5748 1.11672 13.5748 1.40005C13.5748 1.68338 13.4831 1.91672 13.2998 2.10005L8.3998 7.00005L13.2998 11.9C13.4831 12.0834 13.5748 12.3167 13.5748 12.6C13.5748 12.8834 13.4831 13.1167 13.2998 13.3C13.1165 13.4834 12.8831 13.575 12.5998 13.575C12.3165 13.575 12.0831 13.4834 11.8998 13.3L6.9998 8.40005Z" fill="white"/>
                    </svg>
                </div>
                <div id="content-box-container">
                    <div id="content-box-left" class="flex-column">
                        <div id="title-container" class="flex-column gap8px">
                            <div class="subtitle">Title<span class="asterisk">*</span></div>
                            <div id="title-input-container"><input type="text" placeholder="Enter a title" id="board-title-input" />
                                <span id="board-missing-title-message" class="d-none">This field is required</span>
                            </div>
                        </div>
                        <div id="description-container" class="flex-column gap8px">
                            <div class="subtitle">Description</div>
                            <div id="board-textarea-container" class="flex-column"><textarea placeholder="Enter a Description" id="board-textarea-input"></textarea></div>
                        </div>
                        <div id="board-assigned-container" class="flex-column gap8px">
                            <div class="subtitle">Assigned to</div>
                            <div>
                            <div id="board-selected-name" class="select-container" onclick="checkIfContactsDropdownIsVisibleBoard()">
                                <span id="board-assigned-placeholder">Select contacts to assign</span>
                                <div id="board-contacts-dropwdown-arrow-container"><img src="/img/addTask/arrow_drop_down.svg" id="dropdown-arrow" /></div>
                            </div>
                            <div id="board-dropdown-list" class="d-none"></div>
                            </div>
                            <div id="board-selected-contacts-circle-container"></div>
                        </div>
                    </div>
                    <div id="border-container"></div>
                    <div id="content-box-right" class="flex-column">
                        <div id="date-container" class="flex-column gap8px">
                            <div class="subtitle">Due date<span class="asterisk">*</span></div>
                            <div id="calender"><input type="date" id="board-date-input" />
                                <span id="board-missing-date-message" class="d-none">This field is required</span>
                            </div>
                        </div>
                        <div id="prio-container" class="flex-column gap8px">
                            <div class="subtitle">Prio</div>
                            <div id="choose-prio-container">
                                <button class="choose-prio-button flex-center-align" id="board-prio-urgent-button" type="button" onclick="choosePrioBoard('urgent')">
                                    <span id="prio-urgent" class="flex-center-align">Urgent </span>
                                    <svg class="prio-urgent-arrows" id="prio-urgent-arrows" width="21" height="16" viewBox="0 0 21 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path
                                            d="M19.6528 15.2547C19.4182 15.2551 19.1896 15.1803 19.0007 15.0412L10.7487 8.958L2.49663 15.0412C2.38078 15.1267 2.24919 15.1887 2.10939 15.2234C1.96959 15.2582 1.82431 15.2651 1.68184 15.2437C1.53937 15.2223 1.40251 15.1732 1.27906 15.099C1.15562 15.0247 1.04801 14.927 0.96238 14.8112C0.876751 14.6954 0.814779 14.5639 0.780002 14.4243C0.745226 14.2846 0.738325 14.1394 0.759696 13.997C0.802855 13.7095 0.958545 13.4509 1.19252 13.2781L10.0966 6.70761C10.2853 6.56802 10.5139 6.49268 10.7487 6.49268C10.9835 6.49268 11.212 6.56802 11.4007 6.70761L20.3048 13.2781C20.4908 13.415 20.6286 13.6071 20.6988 13.827C20.7689 14.0469 20.7678 14.2833 20.6955 14.5025C20.6232 14.7216 20.4834 14.9124 20.2962 15.0475C20.1089 15.1826 19.8837 15.2551 19.6528 15.2547Z"
                                            fill="currentColor"
                                        />
                                        <path
                                            d="M19.6528 9.50568C19.4182 9.50609 19.1896 9.43124 19.0007 9.29214L10.7487 3.20898L2.49663 9.29214C2.26266 9.46495 1.96957 9.5378 1.68184 9.49468C1.39412 9.45155 1.13532 9.29597 0.962385 9.06218C0.789449 8.82838 0.716541 8.53551 0.7597 8.24799C0.802859 7.96048 0.95855 7.70187 1.19252 7.52906L10.0966 0.958588C10.2853 0.818997 10.5139 0.743652 10.7487 0.743652C10.9835 0.743652 11.212 0.818997 11.4007 0.958588L20.3048 7.52906C20.4908 7.66598 20.6286 7.85809 20.6988 8.07797C20.769 8.29785 20.7678 8.53426 20.6955 8.75344C20.6232 8.97262 20.4834 9.16338 20.2962 9.29847C20.1089 9.43356 19.8837 9.50608 19.6528 9.50568Z"
                                            fill="currentColor"
                                        />
                                    </svg>
                                </button>
                                <button class="choose-prio-button flex-center-align prio-medium-button-bg-color" id="board-prio-medium-button" type="button" onclick="choosePrioBoard('medium')">
                                    <span id="prio-medium" class="flex-center-align">Medium </span>
                                    <svg class="prio-medium-arrows" id="prio-medium-arrows" width="21" height="8" viewBox="0 0 21 8" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                        <g clip-path="url(#clip0_228141_4295)">
                                            <path d="M19.1526 7.72528H1.34443C1.05378 7.72528 0.775033 7.60898 0.569514 7.40197C0.363995 7.19495 0.248535 6.91419 0.248535 6.62143C0.248535 6.32867 0.363995 6.0479 0.569514 5.84089C0.775033 5.63388 1.05378 5.51758 1.34443 5.51758H19.1526C19.4433 5.51758 19.722 5.63388 19.9276 5.84089C20.1331 6.0479 20.2485 6.32867 20.2485 6.62143C20.2485 6.91419 20.1331 7.19495 19.9276 7.40197C19.722 7.60898 19.4433 7.72528 19.1526 7.72528Z" fill="currentColor" />
                                            <path
                                                d="M19.1526 2.48211H1.34443C1.05378 2.48211 0.775033 2.36581 0.569514 2.1588C0.363995 1.95179 0.248535 1.67102 0.248535 1.37826C0.248535 1.0855 0.363995 0.804736 0.569514 0.597724C0.775033 0.390712 1.05378 0.274414 1.34443 0.274414L19.1526 0.274414C19.4433 0.274414 19.722 0.390712 19.9276 0.597724C20.1331 0.804736 20.2485 1.0855 20.2485 1.37826C20.2485 1.67102 20.1331 1.95179 19.9276 2.1588C19.722 2.36581 19.4433 2.48211 19.1526 2.48211Z"
                                                fill="currentColor"
                                            />
                                        </g>
                                        <defs>
                                            <clipPath id="clip0_228141_4295">
                                                <rect width="20" height="7.45098" fill="currentColor" transform="translate(0.248535 0.274414)" />
                                            </clipPath>
                                        </defs>
                                    </svg>
                                </button>
                                <button class="choose-prio-button flex-center-align" id="board-prio-low-button" type="button" onclick="choosePrioBoard('low')">
                                    <span id="prio-low" class="flex-center-align"> Low </span>
                                    <svg class="prio-low-arrows" id="prio-low-arrows" width="21" height="16" viewBox="0 0 21 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path
                                            d="M10.2485 9.50589C10.0139 9.5063 9.7854 9.43145 9.59655 9.29238L0.693448 2.72264C0.57761 2.63708 0.47977 2.52957 0.405515 2.40623C0.33126 2.28289 0.282043 2.14614 0.260675 2.00379C0.217521 1.71631 0.290421 1.42347 0.463337 1.1897C0.636253 0.955928 0.895022 0.800371 1.18272 0.757248C1.47041 0.714126 1.76347 0.786972 1.99741 0.95976L10.2485 7.04224L18.4997 0.95976C18.6155 0.874204 18.7471 0.812285 18.8869 0.777538C19.0266 0.742791 19.1719 0.735896 19.3144 0.757248C19.4568 0.7786 19.5937 0.82778 19.7171 0.901981C19.8405 0.976181 19.9481 1.07395 20.0337 1.1897C20.1194 1.30545 20.1813 1.43692 20.2161 1.57661C20.2509 1.71629 20.2578 1.86145 20.2364 2.00379C20.215 2.14614 20.1658 2.28289 20.0916 2.40623C20.0173 2.52957 19.9195 2.63708 19.8036 2.72264L10.9005 9.29238C10.7117 9.43145 10.4831 9.5063 10.2485 9.50589Z"
                                            fill="currentColor"
                                        />
                                        <path
                                            d="M10.2485 15.2544C10.0139 15.2548 9.7854 15.18 9.59655 15.0409L0.693448 8.47117C0.459502 8.29839 0.30383 8.03981 0.260675 7.75233C0.217521 7.46485 0.290421 7.17201 0.463337 6.93824C0.636253 6.70446 0.895021 6.54891 1.18272 6.50578C1.47041 6.46266 1.76347 6.53551 1.99741 6.7083L10.2485 12.7908L18.4997 6.7083C18.7336 6.53551 19.0267 6.46266 19.3144 6.50578C19.602 6.54891 19.8608 6.70446 20.0337 6.93824C20.2066 7.17201 20.2795 7.46485 20.2364 7.75233C20.1932 8.03981 20.0376 8.29839 19.8036 8.47117L10.9005 15.0409C10.7117 15.18 10.4831 15.2548 10.2485 15.2544Z"
                                            fill="currentColor"
                                        />
                                    </svg>
                                </button>
                            </div>
                        </div>
                        <div id="board-category-container" class="flex-column gap8px">
                            <div class="subtitle">Category<span class="asterisk">*</span></div>
                            <div>
                                <div id="board-selected-category" class="select-container" onclick="boardAddTaskCheckIfCategoryDropdownIsVisible(), boardAddTaskDoNotCloseDropdown(event)">
                                    <span id="board-category-placeholder">Select task category</span>
                                    <div id="board-category-dropdown-arrow-container"><img src="/img/addTask/arrow_drop_down.svg" id="dropdown-arrow" /></div>
                                </div>
                                <span id="board-missing-category-message" class="d-none">This field is required</span>
                            </div>    
                            <div id="board-category-dropdown-list" class="d-none"></div>
                        </div>
                        <div id="substasks-container" class="flex-column gap8px">
                            <div class="subtitle">Subtasks</div>
                            <div id="board-subtask-relative-container">
                                <div id="board-new-subtask-container" onclick="addOrCloseSubtaskBoard()">
                                    <input type="text" id="board-new-subtask-input" placeholder="Add new subtask" class="subtaskInputsBoard"/>
                                    <div id="board-subtask-icon-container">
                                        <div id="board-plus-icon-container" class="circleHoverEffect"><img src="/img/addTask/add.png" id="plus-icon" alt="plus-icon" /></div>
                                    </div>
                                </div>
                                <span id="board-missing-subtask-message" class="d-none">Please add a subtask üôÇ</span>
                            </div>
                            <div id="board-new-subtask-list-container"><div id="board-generated-subtask-list-container"></div></div>
                        </div>
                    </div>
                </div>
                <div id="interactives-buttons-and-required-container">
                    <div id="required-container">
                        <span id="required-span"><span class="asterisk">*</span>This field is required</span>
                    </div>
                    <div id="interactives-buttons-container">
                        <button id="clear-button" class="flex-center-align" type="button" onclick="clearFieldsBoard()"><span id="clear-button-font" class="contents">Clear</span> <img src="/img/Vector.png" id="cancel-icon" /></button>
                        <button id="create-button" class="flex-center-align" type="button" onclick="addTaskFromBoard()"><span id="create-task-button-font" class="contents">Create Task</span><img src="/img/summary/check.png" id="check-icon" /></button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

/**
 * Check the visibility of the category dropdown.
 * If the dropdown is hidden, it opens the dropdown; otherwise, it closes it.
 */
function boardAddTaskCheckIfCategoryDropdownIsVisible() {
    if (document.getElementById("board-category-dropdown-list").classList.contains("d-none")) {
        boardAddTaskShowCategoryDropDown();
    } else {
        boardAddTaskCloseCategoryDropDown();
    }
}

/**
 * Displays the category dropdown and resets the selected category.
 * It also changes the dropdown arrow to indicate the open state.
 */
function boardAddTaskShowCategoryDropDown() {
    document.getElementById("board-category-placeholder").innerHTML = /*html*/ `Select task category`;
    document.getElementById("board-category-dropdown-arrow-container").innerHTML = /*html*/ `<img src="/img/addTask/arrow_drop_up.png" id="board-dropdown-arrow"/>`;

    let dropdownList = document.getElementById("board-category-dropdown-list");
    dropdownList.innerHTML = boardAddTaskTemplateCategoryHTMLDropdownList(categoryList);

    document.getElementById("board-category-dropdown-list").classList.remove("d-none");
    selectedCategory = null;
}

/**
 * Closes the category dropdown.
 * If a category is selected, it displays the selected category in the placeholder;
 * otherwise, it resets the placeholder to the default "Select task category".
 */
function boardAddTaskCloseCategoryDropDown() {
    let categoryPlaceholder = document.getElementById("board-category-placeholder");

    if (selectedCategory) {
        categoryPlaceholder.innerHTML = selectedCategory;
        checkIfCategoryIsSelectedBoard();
    } else {
        categoryPlaceholder.innerHTML = /*html*/ `Select task category`;
        selectedCategory = null;
        checkIfCategoryIsSelectedBoard();
    }

    document.getElementById("board-category-dropdown-arrow-container").innerHTML = /*html*/ `<div id="board-category-dropdown-arrow-container"><img src="/img/addTask/arrow_drop_down.svg" id="board-dropdown-arrow"></div>`;
    document.getElementById("board-category-dropdown-list").classList.add("d-none");
}

/**
 * Generates the HTML template for the category dropdown list.
 *
 * @param {Array} categories - The list of available categories to be displayed.
 * @returns {string} The generated HTML string for the category dropdown list.
 */
function boardAddTaskTemplateCategoryHTMLDropdownList(categories) {
    let dropdownHTML = "";
    for (let i = 0; i < categories.length; i++) {
        let category = categories[i];

        dropdownHTML += /*html*/ `
            <div class="dropdown-item" id="dropdown-list-category-${i}" onclick="boardAddTaskSelectCategory('${category}', ${i})">
                <span>${category}</span>
            </div>`;
    }
    return dropdownHTML;
}

/**
 * Prevents the dropdown from closing when clicking inside it.
 *
 * @param {Event} event - The click event.
 */
function boardAddTaskDoNotCloseDropdown(event) {
    event.stopPropagation();
}

/**
 * Selects a category from the dropdown.
 * Adds a border style to the category container and closes the dropdown.
 *
 * @param {string} categoryName - The name of the selected category.
 */
function boardAddTaskSelectCategory(categoryName) {
    selectedCategory = categoryName;
    boardAddTaskCloseCategoryDropDown();
}

/**
 * Sets up event listeners for the document after the DOM is fully loaded.
 *
 * This function is executed when the DOM content has been fully loaded and parsed,
 * ensuring that the event listeners are attached after the HTML structure is available.
 *
 * - Attaches an event listener to detect clicks outside of the category dropdown on the board.
 *
 * @listens document#DOMContentLoaded
 * @listens document#click
 */
document.addEventListener("DOMContentLoaded", function () {
    document.addEventListener("click", clickOutsideOfCategoryDropdownBoard);
});

/**
 * Handles clicks outside the category dropdown on the board.
 *
 * This function checks if the user clicked outside the category dropdown. If so, it closes the dropdown
 * and resets the border of the selected category input.
 *
 * - If the category dropdown is visible, it calls functions to close it.
 * - If a category is selected, it resets the border of the category input to a default color.
 *
 * @param {Event} event - The click event triggered on the document.
 */
function clickOutsideOfCategoryDropdownBoard(event) {
    let categoryDropdownBoard = document.getElementById("board-category-dropdown-list");
    let clickedInsideCategory = categoryDropdownBoard && categoryDropdownBoard.contains(event.target);

    if (!clickedInsideCategory) {
        if (categoryDropdownBoard && !categoryDropdownBoard.classList.contains("d-none")) {
            boardAddTaskCloseCategoryDropDown();
        }

        if (categoryDropdownBoard && !categoryDropdownBoard.classList.contains("d-none")) {
            closeCategoryDropDown();
        }
        if (selectedCategory) {
            let categoryInput = document.getElementById("board-selected-category");
            categoryInput.style.border = "1px solid #d1d1d1";
        }
    }
}

/**
 * Sets up event listener to handle clicks outside the contacts dropdown on the board.
 *
 * This function listens for the 'click' event on the document after the DOM content is loaded.
 * When a click is detected, it calls `clickOutsideOfContactsDropdownBoard` to handle the behavior
 * of the contacts dropdown when a user clicks outside of it.
 */
document.addEventListener("DOMContentLoaded", function () {
    document.addEventListener("click", clickOutsideOfContactsDropdownBoard);
});

/**
 * Closes the contacts dropdown when a click occurs outside the dropdown or the contacts input.
 *
 * This function checks if the click event occurred inside the contacts dropdown or the contacts input.
 * If the click happened outside of both, it closes the contacts dropdown if it's currently visible.
 *
 * @param {Event} event - The click event triggered by the user.
 */
function clickOutsideOfContactsDropdownBoard(event) {
    const contactsDropdown = document.getElementById("board-dropdown-list");
    const contactsInput = document.getElementById("board-selected-name");

    const clickedInsideDropdown = contactsDropdown && contactsDropdown.contains(event.target);
    const clickedOnContactsInput = contactsInput && contactsInput.contains(event.target);

    if (!clickedInsideDropdown && !clickedOnContactsInput) {
        if (contactsDropdown && !contactsDropdown.classList.contains("d-none")) {
            closeContactsDropDownBoard();
        }
    }
}
